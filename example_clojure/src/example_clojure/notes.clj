(ns example-clojure.notes)

;https://www.youtube.com/watch?v=wASCH_gPnDw&t=365s - notes

;(1 2 3 4) is a singly linked list where it is more efficient to add to front
;instead of at the end (cons())
;vector in it of itself is a function
([1 2 3 4] 0)
({:a 1 :b 2}:a)

; prefix notation made abstract syntax tree possible

;code -> text -> reader -> data -> evaluator

(conj '(99) '(1 2 3 4)) ; conj will add elements to the end on a list
(conj [99] [1 2 3 4]) ; conj will add element to the front on a vector

; meaning of immutable and persistent data structure
; if you take immutable data structure and produce a new data structure out of it, several
; things will hold true, these are:

; 1.  The old version will remain accessible
;
; 2.  The new version will be compliant in complexity to the old version. For example:
;     if the old version can have a element inserted at the end at constant time, then
;     the new version must obey this complexity (watch 35:00)
;
;     2a. This implies that the new version is not generated by fully copying the old version
;         and sharing of information is happening in the background
;
; 3.  What is the meaning of time construct
;
;   3b. Succession of value -> reference to a value
;   3c. Has to be atomic
;   3d. Visible

